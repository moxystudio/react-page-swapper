{"version":3,"file":"static/webpack/static/development/pages/index.js.812132b32f7c553b886e.hot-update.js","sources":["webpack:///./components/animation-picker/AnimationPicker.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport classNames from 'classnames';\nimport { Paper, Button } from '@material-ui/core';\nimport styles from './AnimationPicker.module.css';\n\nconst AnimationPicker = ({ nextHref, followScroll }) => {\n    const [animate, setAnimate] = useState(false);\n    const [scrollTop, setScrollTop] = useState(0);\n    const scrollTimeoutIdRef = useRef();\n\n    useEffect(() => {\n        if (!followScroll) {\n            return;\n        }\n\n        const handleScroll = () => {\n            clearTimeout(scrollTimeoutIdRef.current);\n            scrollTimeoutIdRef.current = setTimeout(() => {\n                setScrollTop(document.scrollingElement.scrollTop - ((window.outerHeight - window.innerHeight) / 2));\n            }, 200);\n        };\n\n        setScrollTop(document.scrollingElement.scrollTop - ((window.outerHeight - window.innerHeight) / 2));\n        window.addEventListener('scroll', handleScroll, { passive: true });\n\n        return () => {\n            clearTimeout(scrollTimeoutIdRef.current);\n            window.removeEventListener('scroll', handleScroll, { passive: true });\n        };\n    }, [followScroll]);\n\n    useEffect(() => {\n        const setAnimateTimeoutId = setTimeout(() => setAnimate(true), 50);\n\n        return () => {\n            clearTimeout(setAnimateTimeoutId);\n        };\n    }, []);\n\n    const style = { transform: `translate(-50%, calc(-50% + ${scrollTop}px))` };\n\n    return (\n        <Paper\n            elevation={ 3 }\n            className={ classNames(styles.animationPicker, { [styles.animate]: animate }) }\n            style={ style }>\n            <Link href={ `${nextHref}?animation=slideLeft` } passHref scroll={ false }>\n                <Button variant=\"contained\" disableRipple className={ styles.button }>Slide left</Button>\n            </Link>\n            <Link href={ `${nextHref}?animation=slideRight` } passHref scroll={ false }>\n                <Button variant=\"contained\" disableRipple className={ styles.button }>Slide right</Button>\n            </Link>\n            <Link href={ `${nextHref}?animation=glideLeft` } passHref scroll={ false }>\n                <Button variant=\"contained\" disableRipple className={ styles.button }>Glide left</Button>\n            </Link>\n            <Link href={ `${nextHref}?animation=glideRight` } passHref scroll={ false }>\n                <Button variant=\"contained\" disableRipple className={ styles.button }>Glide right</Button>\n            </Link>\n            <Link href={ `${nextHref}?animation=fade` } passHref scroll={ false }>\n                <Button variant=\"contained\" disableRipple className={ styles.button }>Fade</Button>\n            </Link>\n        </Paper>\n    );\n};\n\nAnimationPicker.propTypes = {\n    nextHref: PropTypes.string.isRequired,\n    followScroll: PropTypes.bool,\n};\n\nexport default AnimationPicker;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}